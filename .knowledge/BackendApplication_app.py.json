{"is_source_file": true, "format": "Python", "description": "This file defines a Flask web application providing REST API endpoints for device management, including CRUD operations, health checks, and device status monitoring. It also handles database initialization with MongoDB, input validation, and some utility functions.", "external_files": ["flask", "flask_cors", "pymongo", "datetime", "platform", "subprocess", "re", "json", "os", "typing"], "external_methods": ["flask.Flask", "flask.jsonify", "flask.request", "flask_cors.CORS", "pymongo.MongoClient", "datetime.datetime.utcnow", "platform.system", "subprocess.run", "re.match"], "published": ["create_app"], "classes": [], "methods": [{"name": "create_app()", "description": "Creates and configures a Flask application with various API endpoints for device management and health checks.", "scope": "", "scopeKind": ""}, {"name": "bool is_ipv4(val: str)", "description": "Checks if a given string is a valid IPv4 address.", "scope": "", "scopeKind": ""}, {"name": "bool ping_host(host: str, timeout: float = 2.0)", "description": "Attempts to ping a host to check its reachability with a specified timeout.", "scope": "", "scopeKind": ""}, {"name": "Tuple[bool,str] validate_device_payload(payload: dict, require_status: bool)", "description": "Validates the payload for device creation or update, ensuring required fields and correct formats.", "scope": "", "scopeKind": ""}, {"name": "dict serialize_device(doc: dict)", "description": "Serializes a MongoDB device document into a JSON-serializable dictionary for API response.", "scope": "", "scopeKind": ""}, {"name": "init_db()", "description": "Initializes a MongoDB client connection based on environment variables, and returns the database object.", "scope": "", "scopeKind": ""}, {"name": "get_openapi_spec()", "description": "Builds a minimal OpenAPI specification matching the implemented endpoints.", "scope": "", "scopeKind": ""}, {"name": "error_response(message: str, status: int = 400)", "description": "Returns a standardized JSON error response with a specified message and HTTP status code.", "scope": "", "scopeKind": ""}, {"name": "api_root()", "scope": "create_app", "scopeKind": "function", "description": "unavailable"}, {"name": "create_device()", "scope": "create_app", "scopeKind": "function", "description": "unavailable"}, {"name": "delete_device(id)", "scope": "create_app", "scopeKind": "function", "description": "unavailable"}, {"name": "device_status(id)", "scope": "create_app", "scopeKind": "function", "description": "unavailable"}, {"name": "docs()", "scope": "create_app", "scopeKind": "function", "description": "unavailable"}, {"name": "get_device(id)", "scope": "create_app", "scopeKind": "function", "description": "unavailable"}, {"name": "health()", "scope": "create_app", "scopeKind": "function", "description": "unavailable"}, {"name": "list_devices()", "scope": "create_app", "scopeKind": "function", "description": "unavailable"}, {"name": "openapi()", "scope": "create_app", "scopeKind": "function", "description": "unavailable"}, {"name": "update_device(id)", "scope": "create_app", "scopeKind": "function", "description": "unavailable"}], "calls": ["os.getenv", "CORS", "platform.system", "subprocess.run", "request.get_json", "datetime.utcnow", "db.devices.create_index", "db.devices.find", "db.devices.insert_one", "db.devices.find_one", "db.devices.update_one", "db.devices.delete_one", "db.devices.update_one", "db.admin.command", "get_openapi_spec"], "search-terms": ["Flask device API", "MongoDB device management", "/api/v1/devices", "device health check", "device status", "validate device payload", "serialize device", "ping host"], "state": 2, "file_id": 7, "knowledge_revision": 15, "git_revision": "", "ctags": [{"_type": "tag", "name": "MongoClient", "path": "/home/kavia/workspace/code-generation/containerized-network-management-6128-5252/BackendApplication/app.py", "pattern": "/^    MongoClient = None$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "api_root", "path": "/home/kavia/workspace/code-generation/containerized-network-management-6128-5252/BackendApplication/app.py", "pattern": "/^    def api_root():$/", "file": true, "language": "Python", "kind": "function", "signature": "()", "scope": "create_app", "scopeKind": "function"}, {"_type": "tag", "name": "app", "path": "/home/kavia/workspace/code-generation/containerized-network-management-6128-5252/BackendApplication/app.py", "pattern": "/^    app = create_app()$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "create_app", "path": "/home/kavia/workspace/code-generation/containerized-network-management-6128-5252/BackendApplication/app.py", "pattern": "/^def create_app():$/", "language": "Python", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "create_device", "path": "/home/kavia/workspace/code-generation/containerized-network-management-6128-5252/BackendApplication/app.py", "pattern": "/^    def create_device():$/", "file": true, "language": "Python", "kind": "function", "signature": "()", "scope": "create_app", "scopeKind": "function"}, {"_type": "tag", "name": "delete_device", "path": "/home/kavia/workspace/code-generation/containerized-network-management-6128-5252/BackendApplication/app.py", "pattern": "/^    def delete_device(id):$/", "file": true, "language": "Python", "kind": "function", "signature": "(id)", "scope": "create_app", "scopeKind": "function"}, {"_type": "tag", "name": "device_status", "path": "/home/kavia/workspace/code-generation/containerized-network-management-6128-5252/BackendApplication/app.py", "pattern": "/^    def device_status(id):$/", "file": true, "language": "Python", "kind": "function", "signature": "(id)", "scope": "create_app", "scopeKind": "function"}, {"_type": "tag", "name": "docs", "path": "/home/kavia/workspace/code-generation/containerized-network-management-6128-5252/BackendApplication/app.py", "pattern": "/^    def docs():$/", "file": true, "language": "Python", "kind": "function", "signature": "()", "scope": "create_app", "scopeKind": "function"}, {"_type": "tag", "name": "error_response", "path": "/home/kavia/workspace/code-generation/containerized-network-management-6128-5252/BackendApplication/app.py", "pattern": "/^def error_response(message: str, status: int = 400):$/", "language": "Python", "kind": "function", "signature": "(message: str, status: int = 400)"}, {"_type": "tag", "name": "errors", "path": "/home/kavia/workspace/code-generation/containerized-network-management-6128-5252/BackendApplication/app.py", "pattern": "/^    errors = None$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "get_device", "path": "/home/kavia/workspace/code-generation/containerized-network-management-6128-5252/BackendApplication/app.py", "pattern": "/^    def get_device(id):$/", "file": true, "language": "Python", "kind": "function", "signature": "(id)", "scope": "create_app", "scopeKind": "function"}, {"_type": "tag", "name": "get_openapi_spec", "path": "/home/kavia/workspace/code-generation/containerized-network-management-6128-5252/BackendApplication/app.py", "pattern": "/^def get_openapi_spec():$/", "language": "Python", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "health", "path": "/home/kavia/workspace/code-generation/containerized-network-management-6128-5252/BackendApplication/app.py", "pattern": "/^    def health():$/", "file": true, "language": "Python", "kind": "function", "signature": "()", "scope": "create_app", "scopeKind": "function"}, {"_type": "tag", "name": "init_db", "path": "/home/kavia/workspace/code-generation/containerized-network-management-6128-5252/BackendApplication/app.py", "pattern": "/^def init_db():$/", "language": "Python", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "is_ipv4", "path": "/home/kavia/workspace/code-generation/containerized-network-management-6128-5252/BackendApplication/app.py", "pattern": "/^def is_ipv4(val: str) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "function", "signature": "(val: str)"}, {"_type": "tag", "name": "list_devices", "path": "/home/kavia/workspace/code-generation/containerized-network-management-6128-5252/BackendApplication/app.py", "pattern": "/^    def list_devices():$/", "file": true, "language": "Python", "kind": "function", "signature": "()", "scope": "create_app", "scopeKind": "function"}, {"_type": "tag", "name": "openapi", "path": "/home/kavia/workspace/code-generation/containerized-network-management-6128-5252/BackendApplication/app.py", "pattern": "/^    def openapi():$/", "file": true, "language": "Python", "kind": "function", "signature": "()", "scope": "create_app", "scopeKind": "function"}, {"_type": "tag", "name": "ping_host", "path": "/home/kavia/workspace/code-generation/containerized-network-management-6128-5252/BackendApplication/app.py", "pattern": "/^def ping_host(host: str, timeout: float = 2.0) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "function", "signature": "(host: str, timeout: float = 2.0)"}, {"_type": "tag", "name": "port", "path": "/home/kavia/workspace/code-generation/containerized-network-management-6128-5252/BackendApplication/app.py", "pattern": "/^    port = int(os.getenv(\"PORT\", \"3001\"))$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "serialize_device", "path": "/home/kavia/workspace/code-generation/containerized-network-management-6128-5252/BackendApplication/app.py", "pattern": "/^def serialize_device(doc: dict) -> dict:$/", "language": "Python", "typeref": "typename:dict", "kind": "function", "signature": "(doc: dict)"}, {"_type": "tag", "name": "update_device", "path": "/home/kavia/workspace/code-generation/containerized-network-management-6128-5252/BackendApplication/app.py", "pattern": "/^    def update_device(id):$/", "file": true, "language": "Python", "kind": "function", "signature": "(id)", "scope": "create_app", "scopeKind": "function"}, {"_type": "tag", "name": "validate_device_payload", "path": "/home/kavia/workspace/code-generation/containerized-network-management-6128-5252/BackendApplication/app.py", "pattern": "/^def validate_device_payload(payload: dict, require_status: bool) -> Tuple[bool, str]:$/", "language": "Python", "typeref": "typename:Tuple[bool,str]", "kind": "function", "signature": "(payload: dict, require_status: bool)"}], "hash": "228bbb66c6b34c40ec7efa9a0e80865a", "format-version": 4, "code-base-name": "BackendApplication", "filename": "BackendApplication/app.py", "fields": [{"name": "MongoClient = None", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "app = create_app()", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "errors = None", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "port = int(os.getenv(\"PORT\", \"3001\"))", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"15": ""}]}
{"is_source_file": true, "format": "Python", "description": "This is a Flask-based backend application source file implementing REST API endpoints for device management including CRUD operations, health checks, status checks via ping, and API documentation. It interfaces with a MongoDB backend and includes logic for validation, serialization, and environment configuration.", "external_files": ["flask", "flask_cors", "pymongo", "bson", "platform", "subprocess", "datetime", "typing"], "external_methods": ["Flask.__init__", "jsonify", "request.get_json", "CORS", "MongoClient.__init__", "MongoClient.admin.command", "list", "dict.get", "re.match", "subprocess.run", "datetime.utcnow", "ASCII", "ObjectId.is_valid", "ObjectId"], "published": ["create_app", "is_ipv4", "ping_host", "validate_device_payload", "serialize_device", "find_device_by_any_id", "init_db", "get_openapi_spec", "error_response"], "classes": [], "methods": [{"name": "create_app()", "description": "Creates and configures the Flask application with routes for health, device CRUD operations, health and status checks, and documentation endpoints.", "scope": "", "scopeKind": ""}, {"name": "bool is_ipv4(val: str)", "description": "Checks if the provided string matches a standard IPv4 address pattern.", "scope": "", "scopeKind": ""}, {"name": "bool ping_host(host: str, timeout: float = 2.0)", "description": "Attempts to ping a hostname or IP with a specified timeout using system ping command.", "scope": "", "scopeKind": ""}, {"name": "Tuple[bool,str] validate_device_payload(payload: dict, require_status: bool)", "description": "Validates the JSON payload for device creation or update, ensuring required fields and correct formats.", "scope": "", "scopeKind": ""}, {"name": "dict serialize_device(doc: dict)", "description": "Converts a MongoDB device document into a JSON serializable dictionary with specified fields.", "scope": "", "scopeKind": ""}, {"name": "find_device_by_any_id(db, id_value: str)", "description": "Finds device document in MongoDB either by ObjectId or by ip_address or 'id' field.", "scope": "", "scopeKind": ""}, {"name": "init_db()", "description": "Establishes connection to MongoDB using environment variables, returning the database handle, availability status, and any errors.", "scope": "", "scopeKind": ""}, {"name": "get_openapi_spec()", "description": "Generates a minimal OpenAPI specification JSON object describing available endpoints.", "scope": "", "scopeKind": ""}, {"name": "error_response(message: str, status: int = 400)", "description": "Returns a JSON payload indicating an error with a specific HTTP status code.", "scope": "", "scopeKind": ""}, {"name": "_to_object_id(value: str)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "api_root()", "scope": "create_app", "scopeKind": "function", "description": "unavailable"}, {"name": "create_device()", "scope": "create_app", "scopeKind": "function", "description": "unavailable"}, {"name": "delete_device(id)", "scope": "create_app", "scopeKind": "function", "description": "unavailable"}, {"name": "device_status(id)", "scope": "create_app", "scopeKind": "function", "description": "unavailable"}, {"name": "docs()", "scope": "create_app", "scopeKind": "function", "description": "unavailable"}, {"name": "get_device(id)", "scope": "create_app", "scopeKind": "function", "description": "unavailable"}, {"name": "health()", "scope": "create_app", "scopeKind": "function", "description": "unavailable"}, {"name": "list_devices()", "scope": "create_app", "scopeKind": "function", "description": "unavailable"}, {"name": "openapi()", "scope": "create_app", "scopeKind": "function", "description": "unavailable"}, {"name": "update_device(id)", "scope": "create_app", "scopeKind": "function", "description": "unavailable"}], "calls": ["app.run", "MongoClient.admin.command", "db.devices.create_index", "list", "serialize_device", "error_response", "find_device_by_any_id", "ping_host", "get_openapi_spec"], "search-terms": ["Flask app creation", "MongoDB device management", "device validation", "device serialization", "device ID lookup", "ping host check", "API health endpoint", "OpenAPI spec generation"], "state": 2, "file_id": 7, "knowledge_revision": 25, "git_revision": "b3ecf15a20cde48cb03d88bf757dd62c22fed82f", "revision_history": [{"15": ""}, {"22": "02a0045a9a199c290f891f4929054da9c3ffcfa9"}, {"24": "02a0045a9a199c290f891f4929054da9c3ffcfa9"}, {"25": "b3ecf15a20cde48cb03d88bf757dd62c22fed82f"}], "ctags": [{"_type": "tag", "name": "MongoClient", "path": "/home/kavia/workspace/code-generation/containerized-network-management-6128-5252/BackendApplication/app.py", "pattern": "/^    MongoClient = None$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "_to_object_id", "path": "/home/kavia/workspace/code-generation/containerized-network-management-6128-5252/BackendApplication/app.py", "pattern": "/^def _to_object_id(value: str):$/", "language": "Python", "kind": "function", "signature": "(value: str)"}, {"_type": "tag", "name": "api_root", "path": "/home/kavia/workspace/code-generation/containerized-network-management-6128-5252/BackendApplication/app.py", "pattern": "/^    def api_root():$/", "file": true, "language": "Python", "kind": "function", "signature": "()", "scope": "create_app", "scopeKind": "function"}, {"_type": "tag", "name": "app", "path": "/home/kavia/workspace/code-generation/containerized-network-management-6128-5252/BackendApplication/app.py", "pattern": "/^    app = create_app()$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "create_app", "path": "/home/kavia/workspace/code-generation/containerized-network-management-6128-5252/BackendApplication/app.py", "pattern": "/^def create_app():$/", "language": "Python", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "create_device", "path": "/home/kavia/workspace/code-generation/containerized-network-management-6128-5252/BackendApplication/app.py", "pattern": "/^    def create_device():$/", "file": true, "language": "Python", "kind": "function", "signature": "()", "scope": "create_app", "scopeKind": "function"}, {"_type": "tag", "name": "delete_device", "path": "/home/kavia/workspace/code-generation/containerized-network-management-6128-5252/BackendApplication/app.py", "pattern": "/^    def delete_device(id):$/", "file": true, "language": "Python", "kind": "function", "signature": "(id)", "scope": "create_app", "scopeKind": "function"}, {"_type": "tag", "name": "device_status", "path": "/home/kavia/workspace/code-generation/containerized-network-management-6128-5252/BackendApplication/app.py", "pattern": "/^    def device_status(id):$/", "file": true, "language": "Python", "kind": "function", "signature": "(id)", "scope": "create_app", "scopeKind": "function"}, {"_type": "tag", "name": "docs", "path": "/home/kavia/workspace/code-generation/containerized-network-management-6128-5252/BackendApplication/app.py", "pattern": "/^    def docs():$/", "file": true, "language": "Python", "kind": "function", "signature": "()", "scope": "create_app", "scopeKind": "function"}, {"_type": "tag", "name": "error_response", "path": "/home/kavia/workspace/code-generation/containerized-network-management-6128-5252/BackendApplication/app.py", "pattern": "/^def error_response(message: str, status: int = 400):$/", "language": "Python", "kind": "function", "signature": "(message: str, status: int = 400)"}, {"_type": "tag", "name": "errors", "path": "/home/kavia/workspace/code-generation/containerized-network-management-6128-5252/BackendApplication/app.py", "pattern": "/^    errors = None$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "find_device_by_any_id", "path": "/home/kavia/workspace/code-generation/containerized-network-management-6128-5252/BackendApplication/app.py", "pattern": "/^def find_device_by_any_id(db, id_value: str):$/", "language": "Python", "kind": "function", "signature": "(db, id_value: str)"}, {"_type": "tag", "name": "get_device", "path": "/home/kavia/workspace/code-generation/containerized-network-management-6128-5252/BackendApplication/app.py", "pattern": "/^    def get_device(id):$/", "file": true, "language": "Python", "kind": "function", "signature": "(id)", "scope": "create_app", "scopeKind": "function"}, {"_type": "tag", "name": "get_openapi_spec", "path": "/home/kavia/workspace/code-generation/containerized-network-management-6128-5252/BackendApplication/app.py", "pattern": "/^def get_openapi_spec():$/", "language": "Python", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "health", "path": "/home/kavia/workspace/code-generation/containerized-network-management-6128-5252/BackendApplication/app.py", "pattern": "/^    def health():$/", "file": true, "language": "Python", "kind": "function", "signature": "()", "scope": "create_app", "scopeKind": "function"}, {"_type": "tag", "name": "init_db", "path": "/home/kavia/workspace/code-generation/containerized-network-management-6128-5252/BackendApplication/app.py", "pattern": "/^def init_db():$/", "language": "Python", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "is_ipv4", "path": "/home/kavia/workspace/code-generation/containerized-network-management-6128-5252/BackendApplication/app.py", "pattern": "/^def is_ipv4(val: str) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "function", "signature": "(val: str)"}, {"_type": "tag", "name": "list_devices", "path": "/home/kavia/workspace/code-generation/containerized-network-management-6128-5252/BackendApplication/app.py", "pattern": "/^    def list_devices():$/", "file": true, "language": "Python", "kind": "function", "signature": "()", "scope": "create_app", "scopeKind": "function"}, {"_type": "tag", "name": "openapi", "path": "/home/kavia/workspace/code-generation/containerized-network-management-6128-5252/BackendApplication/app.py", "pattern": "/^    def openapi():$/", "file": true, "language": "Python", "kind": "function", "signature": "()", "scope": "create_app", "scopeKind": "function"}, {"_type": "tag", "name": "ping_host", "path": "/home/kavia/workspace/code-generation/containerized-network-management-6128-5252/BackendApplication/app.py", "pattern": "/^def ping_host(host: str, timeout: float = 2.0) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "function", "signature": "(host: str, timeout: float = 2.0)"}, {"_type": "tag", "name": "port", "path": "/home/kavia/workspace/code-generation/containerized-network-management-6128-5252/BackendApplication/app.py", "pattern": "/^    port = int(os.getenv(\"PORT\", \"3001\"))$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "serialize_device", "path": "/home/kavia/workspace/code-generation/containerized-network-management-6128-5252/BackendApplication/app.py", "pattern": "/^def serialize_device(doc: dict) -> dict:$/", "language": "Python", "typeref": "typename:dict", "kind": "function", "signature": "(doc: dict)"}, {"_type": "tag", "name": "update_device", "path": "/home/kavia/workspace/code-generation/containerized-network-management-6128-5252/BackendApplication/app.py", "pattern": "/^    def update_device(id):$/", "file": true, "language": "Python", "kind": "function", "signature": "(id)", "scope": "create_app", "scopeKind": "function"}, {"_type": "tag", "name": "validate_device_payload", "path": "/home/kavia/workspace/code-generation/containerized-network-management-6128-5252/BackendApplication/app.py", "pattern": "/^def validate_device_payload(payload: dict, require_status: bool) -> Tuple[bool, str]:$/", "language": "Python", "typeref": "typename:Tuple[bool,str]", "kind": "function", "signature": "(payload: dict, require_status: bool)"}], "hash": "e9375e920f15b4490a369cf6626a5193", "format-version": 4, "code-base-name": "BackendApplication", "filename": "BackendApplication/app.py", "fields": [{"name": "MongoClient = None", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "app = create_app()", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "errors = None", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "port = int(os.getenv(\"PORT\", \"3001\"))", "scope": "", "scopeKind": "", "description": "unavailable"}]}